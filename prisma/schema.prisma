// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled  Boolean @default(false)
  isTwoFactorConfirmation TwoFactorConfirmation?
  army Army[]
  // teamId String? @unique
  // team Team? @relation(fields: [teamId], references: [id])
  // gameId Int @unique
  // game Game @relation(fields: [gameId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id  String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id  String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id  String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  // TO DO add expiry for 2FA so its not done every sign in.
  // expires DateTime
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
}

model Unit {
  id String @id
  unitId String
  name String
  unitType String
  points Int
  image String?
  armyId String
  army Army @relation(fields: [armyId], references: [id], onDelete: Cascade)
}

model Army {
  id String @id @default(cuid())
  faction String
  subfaction String?
  image String?
  units Unit[]
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameId Int

  @@unique([userId, gameId])
}

model Team {
  id String @id @default(cuid())
  teamNumber Int
  users String[]
  gameId Int
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Game {
  id Int @id @default(autoincrement())
  location String
  date  String
  host String
  pointsLimit Int
  teams Team[]
}